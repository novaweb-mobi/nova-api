# Check style
# Verify files that don't end with new line and add new line
function file_ends_with_newline() {
    if [ ! -s "$1" ]; then
        return 0
    else
        [[ $(tail -c2 "$1" | wc -l) -gt 0 ]]
    fi
}

function check_files() {
    for folder in $1/*; do
        if [ -d $folder ]; then
            check_files $folder
        elif [ -f $folder ] && [ ${folder: -3} == ".py" ]; then
            if ! file_ends_with_newline $folder; then
                echo "" >> "$folder"
            fi
        fi
    done
}

cd tests/
docker-compose up -d &
cd ..

check_files $(pwd)/nova_api

export PYTHONPATH=$PYTHONPATH:$(pwd)/nova_api
pylint nova_api -r n --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" > reports/lint_report
pytest --junitxml=xunit-reports/xunit-result-nova_api.xml --cov=nova_api --cov-report xml:coverage-reports/coverage-python.xml  tests/unittests
sleep 15

function db_ready(){
export DB_URL=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' tests_database_1)

python << END
import sys
import os
import mysql.connector


print(os.environ.get("DB_URL"))

try:
     db_conn = mysql.connector.connect(host=os.environ.get("DB_URL"),
                                       user="root",
                                       passwd="root",
                                       database="default")
except mysql.connector.Error as err:
    print('Error:', err)
    sys.exit(-1)
sys.exit(0)
END
}

until db_ready; do
  clear
  >&2 echo 'Waiting for database to become available...'
  sleep 2
done
clear
>&2 echo 'Database is available'
pytest --junitxml=xunit-reports/xunit-result-nova_api-integration.xml tests/integrationtests
cd tests/
docker-compose down
docker-compose rm -f
cd ..
if [ -f './sonar-project.properties' ]; then
	sonar-scanner
fi
