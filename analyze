# Check style
# Verify files that don't end with new line and add new line
function file_ends_with_newline() {
    if [ ! -s "$1" ]; then
        return 0
    else
        [[ $(tail -c2 "$1" | wc -l) -gt 0 ]]
    fi
}

function check_files() {
    for folder in $1/*; do
        if [ -d $folder ]; then
            check_files $folder
        elif [ -f $folder ] && [ ${folder: -3} == ".py" ]; then
            if ! file_ends_with_newline $folder; then
                echo "" >> "$folder"
            fi
        fi
    done
}

check_files $(pwd)/nova_api

export PYTHONPATH=$PYTHONPATH:$(pwd)/nova_api
pylint nova_api -r n --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" > reports/lint_report
cd tests
docker-compose up -d &
export DB_URL=localhost
pytest --junitxml=../xunit-reports/xunit-result-nova_api.xml --cov=nova_api --cov-report xml:../coverage-reports/coverage-python.xml  unittests
sleep 15

function db_ready(){
export DB_URL=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' tests_database_1)
python check_db.py
}

until db_ready; do
  clear
  >&2 echo 'Waiting for database to become available...'
  sleep 2
done
clear
>&2 echo 'Database is available'
cd ..
pytest --junitxml=xunit-reports/xunit-result-nova_api-integration-mysql.xml tests/integrationtests/test_integration_mysql.py

cd tests/
function postgres_ready(){
export DB_URL=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' tests_postgres_1)
echo $DB_URL
python check_postgres.py
}

until postgres_ready; do
  >&2 echo 'Waiting for postgres database to become available...'
  sleep 2
done
clear
>&2 echo 'Postgres is available'
cd ..
pytest --junitxml=xunit-reports/xunit-result-nova_api-integration-postgres.xml tests/integrationtests/test_integration_postgres.py


cd tests/
docker-compose down
docker-compose rm -f
cd ..
if [ -f './sonar-project.properties' ]; then
	sonar-scanner
fi
