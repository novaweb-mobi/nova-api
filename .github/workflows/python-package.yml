# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Package

on:
  push:
    branches: [ master ]
    paths: 
      - nova_api/*.py
      - tests/*.py
  pull_request:
    branches: [ master, dev ]
    paths: 
      - nova_api/*.py
      - tests/*.py

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Check if python files have changed
      uses: actions/github-script@0.9.0
      id: files-changed
      with:
        result-encoding: string
        script: |
          const result = await github.pulls.listFiles({
            owner: context.payload.repository.owner.login,
            repo: context.payload.repository.name,
            pull_number: context.payload.number,
            per_page: 100
          })
          const pythonFilesChanged = result.data.filter(f => f.filename.endsWith(".py")).length > 0
          console.log(pythonFilesChanged)
          return pythonFilesChanged

    - uses: actions/checkout@v2
      if: ${{ steps.files-changed.outputs.result == 'true' }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with pylint
      run: |
        mkdir reports
        pylint nova_api --exit-zero --rcfile=standard.rc -r n --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" > reports/lint_report

    - name: Save pylint report
      uses: actions/upload-artifact@v2
      with:
        name: pylint-report
        path: reports/lint_report

    - name: Check files ending with newline
      run: |
        function file_ends_with_newline() {
          if [ ! -s "$1" ]; then
            return 0
          else
            [[ $(tail -c2 "$1" | wc -l) -gt 0 ]]
          fi
        }

        function check_files() {
          for folder in $1/*; do
            if [ -d $folder ]; then
              check_files $folder
            elif [ -f $folder ] && [ ${folder: -3} == ".py" ]; then
              if ! file_ends_with_newline $folder; then
                echo $folder
                exit 1
              fi
            fi
          done
        }
        check_files $(pwd)/nova_api

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7.x, 3.8.x, 3.9.0-rc.1]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Start database for integration testing
      run: |
        cd tests
        docker-compose up -d
        cd ..

    - name: (Unit)Test with pytest
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/nova_api
        mkdir xunit-reports
        mkdir coverage-reports
        cd tests
        pytest --junitxml=../xunit-reports/xunit-result-nova_api.xml --cov=nova_api --cov-report xml:../coverage-reports/coverage-python.xml  unittests
        
    - name: Integration Test
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/nova_api
        function db_ready(){
          export DB_URL=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' tests_database_1)

          python tests/check_db.py
        }
        until db_ready; do
          >&2 echo 'Waiting for database to become available...'
          sleep 2
        done
        >&2 echo 'Database is available'
        pytest --junitxml=xunit-reports/xunit-result-nova_api-integration.xml tests/integrationtests

        
        
        
