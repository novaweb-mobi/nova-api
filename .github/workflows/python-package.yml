# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Package

on:
  pull_request:
    branches: [ master, dev, dev-fix, dev-feature ]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Check if python files have changed
      uses: actions/github-script@0.9.0
      id: files-changed
      with:
        result-encoding: string
        script: |
          const result = await github.pulls.listFiles({
            owner: context.payload.repository.owner.login,
            repo: context.payload.repository.name,
            pull_number: context.payload.number,
            per_page: 100
          })
          const pythonFilesChanged = result.data.filter(f => f.filename.endsWith(".py")).length > 0
          console.log(pythonFilesChanged)
          return pythonFilesChanged

    - uses: actions/checkout@v2
      if: ${{ steps.files-changed.outputs.result == 'true' }}

    - name: Set up Python ${{ matrix.python-version }}
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      run: |
        python -m pip install --upgrade pip
        pip install pylint pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with pylint
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      run: |
        mkdir reports
        pylint nova_api --exit-zero --rcfile=standard.rc -r n --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" > reports/lint_report

    - name: Save pylint report
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      uses: actions/upload-artifact@v2
      with:
        name: pylint-report
        path: reports/lint_report

    - name: Check files ending with newline
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      run: |
        function file_ends_with_newline() {
          if [ ! -s "$1" ]; then
            return 0
          else
            [[ $(tail -c2 "$1" | wc -l) -gt 0 ]]
          fi
        }

        function check_files() {
          for folder in $1/*; do
            if [ -d $folder ]; then
              check_files $folder
            elif [ -f $folder ] && [ ${folder: -3} == ".py" ]; then
              if ! file_ends_with_newline $folder; then
                echo $folder
                exit 1
              fi
            fi
          done
        }
        check_files $(pwd)/nova_api

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7.x, 3.8.x, 3.9.x] # 3.10.0-beta.1]

    steps:
    - name: Check if python files have changed
      uses: actions/github-script@0.9.0
      id: files-changed
      with:
        result-encoding: string
        script: |
          const result = await github.pulls.listFiles({
            owner: context.payload.repository.owner.login,
            repo: context.payload.repository.name,
            pull_number: context.payload.number,
            per_page: 100
          })
          const pythonFilesChanged = result.data.filter(f => f.filename.endsWith(".py")).length > 0
          console.log(pythonFilesChanged)
          return pythonFilesChanged

    - uses: actions/checkout@v2
      if: ${{ steps.files-changed.outputs.result == 'true' }}

    - name: Set up Python ${{ matrix.python-version }}
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      run: |
        python -m pip install --upgrade pip
        pip install pylint pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Start database for integration testing
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      run: |
        cd tests
        docker-compose up -d
        cd ..

    - name: (Unit)Test with pytest
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/nova_api:$(pwd)/tests
        export DB_NAME=TEST
        mkdir xunit-reports
        mkdir coverage-reports
        pytest --junitxml=xunit-reports/xunit-result-nova_api.xml --cov=nova_api --cov-report xml:coverage-reports/coverage-python.xml  tests/unittests
        
    - name: Integration Test with MySQL
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/nova_api
        function mysql_ready(){
          export DB_URL=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' tests_database_1)

          python tests/check_db.py
        }
        until mysql_ready; do
          >&2 echo 'Waiting for mysql database to become available...'
          sleep 2
        done
        >&2 echo 'MySQL is available'
        pytest --junitxml=xunit-reports/xunit-result-nova_api-integration-mysql.xml tests/integrationtests/test_integration_mysql.py

    - name: Integration Test with PostgreSQL
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/nova_api
        function postgres_ready(){
          export DB_URL=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' tests_postgres_1)

          python tests/check_postgres.py
        }
        until postgres_ready; do
          >&2 echo 'Waiting for postgres database to become available...'
          sleep 2
        done
        >&2 echo 'PostgreSQL is available'
        pytest --junitxml=xunit-reports/xunit-result-nova_api-integration-postgres.xml tests/integrationtests/test_integration_postgres.py

    - name: Integration Test with MongoDB
      if: ${{ steps.files-changed.outputs.result == 'true' }}
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/nova_api
        function mongo_ready(){
          export DB_URL=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' tests_mongo_1)

          python tests/check_mongo.py
        }
        until mongo_ready; do
          >&2 echo 'Waiting for mongo database to become available...'
          sleep 2
        done
        >&2 echo 'MongoDB is available'
        pytest --junitxml=xunit-reports/xunit-result-nova_api-integration-mongo.xml tests/integrationtests/test_integration_mongo.py

  sonar:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python 3.9.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: (Unit)Test with pytest
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/nova_api:$(pwd)/tests
          mkdir -p xunit-reports
          mkdir -p coverage-reports
          mkdir -p reports
          pylint nova_api --exit-zero --rcfile=standard.rc -r n --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" > reports/lint_report
          python3 -m pytest --junitxml=xunit-reports/xunit-result.xml --cov=nova_api --cov-report xml:coverage-reports/coverage.xml  tests/unittests
          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' xunit-reports/xunit-result.xml
          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' coverage-reports/coverage.xml
          

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.xml
            -Dsonar.python.xunit.reportPath=xunit-reports/xunit-result.xml
            -Dsonar.python.pylint.reportPaths=reports/lint_report
